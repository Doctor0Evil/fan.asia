name: Build and Deploy to IKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

env:
  IBM_CLOUD_REGION: us-south
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: iks-test
  IKS_CLUSTER: example-iks-cluster-name-or-id
  DEPLOYMENT_NAME: iks-test
  PORT: 5001
  REPORTS_DIR: .bithubreports
  QUARANTINE_DIR: .bithubreports/quarantine
  DISALLOWED_FILE: .bit/disallowed_terms.txt
  CHARTER_FILE: .bitcharter
  PERSONA_LOCK: .bit/persona.lock
  PERSONA_REGISTRY: .bit/persona_registry.json
  ASSET_ECONOMY: .bit/asset_economy.json
  CONTENT_POLICY: .bit/content_policy.json

jobs:
  # Build, push, and deploy container on push to main
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Install IBM Cloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud --version
          ibmcloud config --check-version=false
          ibmcloud plugin install -f kubernetes-service
          ibmcloud plugin install -f container-registry

      - name: Authenticate with IBM Cloud CLI
        env:
          IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
          ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
        run: |
          ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
          ibmcloud cr region-set "${IBM_CLOUD_REGION}"
          ibmcloud cr login

      - name: Build with Docker
        run: |
          docker build -t "$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      - name: Push the image to ICR
        run: |
          docker push "$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA"

      - name: Deploy to IKS
        run: |
          ibmcloud ks cluster config --cluster "$IKS_CLUSTER"
          kubectl config current-context
          kubectl create deployment "$DEPLOYMENT_NAME" --image="$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA" --dry-run=client -o yaml > deployment.yaml
          kubectl apply -f deployment.yaml
          kubectl rollout status deployment/"$DEPLOYMENT_NAME"
          kubectl create service loadbalancer "$DEPLOYMENT_NAME" --tcp=80:"$PORT" --dry-run=client -o yaml > service.yaml
          kubectl apply -f service.yaml
          kubectl get services -o wide

  # Compliance gate job (runs always, including on main branch push and dispatch)
  compliance-linux:
    name: "🌐 Linux Compliance 长城"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq coreutils

      - name: Display Great Wall Banner
        run: echo "🧱 构建合规长城: BUILDING THE GREAT WALL OF COMPLIANCE 🧱"

      - name: Verify Charter Exists and Terms
        run: |
          test -f "$CHARTER_FILE" || { echo "❌ Missing $CHARTER_FILE"; exit 1; }
          grep -qiE "independent\s*&\s*free" "$CHARTER_FILE" || {
            echo "❌ Required independence clause not found in $CHARTER_FILE"; exit 1;
          }
          echo "✅ Charter present and terms detected."

      - name: Ensure required policy files exist
        run: |
          for f in "$DISALLOWED_FILE" "$PERSONA_LOCK" "$PERSONA_REGISTRY" "$ASSET_ECONOMY" "$CONTENT_POLICY"; do
            test -f "$f" || { echo "❌ Missing policy file: $f"; exit 1; }
          done
          echo "✅ All policy files present."

      - name: Scan for disallowed terms (masked output)
        id: scan_disallowed
        run: |
          mkdir -p "$REPORTS_DIR" "$QUARANTINE_DIR"
          grep -R -n -I -i -f "$DISALLOWED_FILE" . > "$REPORTS_DIR/raw_hits_linux.txt" || true
          if [[ -s "$REPORTS_DIR/raw_hits_linux.txt" ]]; then
            awk -F: '{print $1":"$2":<masked_line>"}' "$REPORTS_DIR/raw_hits_linux.txt" \
              > "$REPORTS_DIR/disallowed_summary.txt"
            cut -d: -f1 "$REPORTS_DIR/raw_hits_linux.txt" | sort -u > "$REPORTS_DIR/offending_files.txt"
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Fail if disallowed content detected
        if: steps.scan_disallowed.outputs.found == 'true'
        run: |
          echo "❌ Compliance stop: disallowed content found (see masked summary in artifacts)."
          exit 1

      - name: Verify persona registry lock
        run: |
          WANT=$(awk -F= '/^registry_sha256=/{print $2}' "$PERSONA_LOCK" | tr -d '\r')
          GOT=$(sha256sum "$PERSONA_REGISTRY" | awk '{print $1}')
          test -n "$WANT" || { echo "❌ registry_sha256 missing from $PERSONA_LOCK"; exit 1; }
          test "$WANT" = "$GOT" || { echo "❌ Persona registry hash mismatch"; exit 1; }
          echo "✅ Persona registry lock verified."

      - name: Validate asset-economy configuration
        run: |
          jq -e 'has("portable") and has("blockchain") and .portable == true and .blockchain == false' "$ASSET_ECONOMY" \
            >/dev/null || { echo "❌ Asset economy must be portable=true and blockchain=false"; exit 1; }
          jq -e 'has("trading") and .trading.enabled == true and .trading.requires_review == true' "$ASSET_ECONOMY" \
            >/dev/null || { echo "❌ Trading must be enabled and require manual review"; exit 1; }
          echo "✅ Asset-economy config validated."

      - name: Validate mature content gating
        run: |
          jq -e 'has("mature_content") and .mature_content.allowed == true and .mature_content.review_required == true' "$CONTENT_POLICY" \
            >/dev/null || { echo "❌ Mature content policy not compliant"; exit 1; }
          echo "✅ Mature content policy validated."

      - name: Ensure CI did not generate explicit runtime artifacts
        run: |
          if [ -d .bit/runtime ] && [ -n "$(ls -A .bit/runtime 2>/dev/null)" ]; then
            echo "❌ Explicit runtime artifacts must not be present in CI (.bit/runtime/*)"; exit 1;
          fi
          echo "✅ No explicit runtime artifacts present."

      - name: Audit log
        run: |
          mkdir -p "$REPORTS_DIR"
          echo "$(date -u +%FT%TZ) Linux compliance passed for $GITHUB_SHA" >> "$REPORTS_DIR/compliance.log"

      - name: Upload masked reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports-linux
          path: |
            .bithubreports/compliance.log
            .bithubreports/disallowed_summary.txt
            .bithubreports/offending_files.txt
          if-no-files-found: warn
          retention-days: 7
